-- Database: practica

-- DROP DATABASE practica;

CREATE DATABASE practica
    WITH 
    OWNER = william
    ENCODING = 'UTF8'
    LC_COLLATE = 'es_GT.UTF-8'
    LC_CTYPE = 'es_GT.UTF-8'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1;
	
CREATE TABLE IF NOT EXISTS PUBLIC.TEMPORAL(
    NOMBRE_CLIENTE VARCHAR,
	CORREO_CLIENTE VARCHAR,
	CLIENTE_ACTIVO VARCHAR,
	FECHA_CREACION VARCHAR,
	TIENDA_PREFERIDA VARCHAR,
	--------------------------------- DIRECCION
	DIRECCION_CLIENTE VARCHAR,
	CODIGO_POSTAL_CLIENTE VARCHAR,
	CIUDAD_CLIENTE VARCHAR,
	PAIS_CLIENTE VARCHAR,
	
	FECHA_RENTA VARCHAR,
	FECHA_RETORNO VARCHAR,
	MONTO_A_PAGAR VARCHAR,
	FECHA_PAGO VARCHAR,
	NOMBRE_EMPLEADO VARCHAR,
	CORREO_EMPLEADO VARCHAR,
	EMPLEADO_ACTIVO VARCHAR,
	TIENDA_EMPLEADO VARCHAR,
	USUARIO_EMPLEADO VARCHAR,
	CONTRASENIA_EMPLEADO VARCHAR,
	--------------------------------- DIRECCION
	DIRECCION_EMPLEADO VARCHAR,
	CODIGO_POSTAL_EMPLEADO VARCHAR,
	CIUDAD_EMPLEADO VARCHAR,
	PAIS_EMPLEADO VARCHAR,
	
	NOMBRE_TIENDA VARCHAR,
	ENCARGADO_TIENDA VARCHAR,
	--------------------------------- DIRECCION
	DIRECCION_TIENDA VARCHAR,
	CODIGO_POSTAL_TIENDA VARCHAR,
	CIUDAD_TIENDA VARCHAR,
	PAIS_TIENDA VARCHAR,
	
	TIENDA_PELICULA VARCHAR,
	NOMBRE_PELICULA VARCHAR,
	DESCRIPCION_PELICULA VARCHAR,
	ANIO_LANZAMIENTO VARCHAR,
	DIAS_RENTA VARCHAR,
	COSTO_RENTA VARCHAR,
	DURACION VARCHAR,
	COSTO_POR_DANIO VARCHAR,
	CLASIFICACION VARCHAR,
	LENGUAJE_PELICULA VARCHAR,
	CATEGORIA_PELICULA VARCHAR,
	ACTOR_PELICULA VARCHAR
	--41
	--id SERIAL PRIMARY KEY
	);
	
ALTER TABLE public.TEMPORAL
    OWNER to william;

SELECT * FROM TEMPORAL;

DROP TABLE TEMPORAL;

COPY PUBLIC.TEMPORAL FROM '/tmp/BlockbusterData.csv' DELIMITER ';' CSV HEADER;

------------------------------------------------------------------------- TABLA DIRECCION
CREATE TABLE IF NOT EXISTS PUBLIC.DIRECCION(
	idDireccion SERIAL PRIMARY KEY,
	Domicilio VARCHAR,  -- Para lo que dice direccion
	CodigoPostal VARCHAR,
	Ciudad VARCHAR,
	Pais VARCHAR
);

DROP TABLE DIRECCION;

-- Se insertan las direcciones de clientes
INSERT INTO DIRECCION (Domicilio, CodigoPostal, Ciudad, Pais)
SELECT DISTINCT DIRECCION_CLIENTE, CODIGO_POSTAL_CLIENTE, CIUDAD_CLIENTE, PAIS_CLIENTE from TEMPORAL
WHERE NOT EXISTS(SELECT FROM DIRECCION WHERE 
				 Domicilio=DIRECCION_CLIENTE and
				 CodigoPostal=CODIGO_POSTAL_CLIENTE and
				 Ciudad=CIUDAD_CLIENTE and
				 Pais=PAIS_CLIENTE) and
				 not(DIRECCION_CLIENTE='-' and CODIGO_POSTAL_CLIENTE='-' and CIUDAD_CLIENTE='-' and PAIS_CLIENTE='-');

-- Se insertan las direcciones de Empleados
INSERT INTO DIRECCION (Domicilio, CodigoPostal, Ciudad, Pais)
SELECT DISTINCT DIRECCION_EMPLEADO, CODIGO_POSTAL_EMPLEADO, CIUDAD_EMPLEADO, PAIS_EMPLEADO FROM TEMPORAL
WHERE NOT EXISTS(SELECT FROM DIRECCION WHERE 
				 Domicilio=DIRECCION_EMPLEADO and
				 CodigoPostal=CODIGO_POSTAL_EMPLEADO and
				 Ciudad=CIUDAD_EMPLEADO and
				 Pais=PAIS_EMPLEADO) and
				 not(DIRECCION_EMPLEADO='-' and CODIGO_POSTAL_EMPLEADO='-' and CIUDAD_EMPLEADO='-' and PAIS_EMPLEADO='-');
	
-- Se insertan las direcciones de Tiendas
INSERT INTO DIRECCION (Domicilio, CodigoPostal, Ciudad, Pais)
SELECT DISTINCT DIRECCION_TIENDA, CODIGO_POSTAL_TIENDA, CIUDAD_TIENDA, PAIS_TIENDA FROM TEMPORAL
WHERE NOT EXISTS(SELECT FROM DIRECCION WHERE 
				 Domicilio=DIRECCION_TIENDA and
				 CodigoPostal=CODIGO_POSTAL_TIENDA and
				 Ciudad=CIUDAD_TIENDA and
				 Pais=PAIS_TIENDA) and
				 not(DIRECCION_TIENDA='-' and CODIGO_POSTAL_TIENDA='-' and CIUDAD_TIENDA='-' and PAIS_TIENDA='-');

------------------------------------------------------------------------- TABLA CLIENTE
CREATE TABLE IF NOT EXISTS PUBLIC.CLIENTE(
	Nombre VARCHAR, 
	Apellido VARCHAR,
	Correo VARCHAR PRIMARY KEY,
	Activo VARCHAR,
	FechaRegistro VARCHAR,
	TiendaPreferida VARCHAR,
	idDireccion INTEGER,
	Rentas INTEGER,
	FOREIGN KEY (idDireccion)
	REFERENCES DIRECCION(idDireccion)
);

DROP TABLE CLIENTE;

INSERT INTO CLIENTE
  SELECT 
  split_part(NOMBRE_CLIENTE, ' ', 1),
  split_part(NOMBRE_CLIENTE, ' ', 2),
  CORREO_CLIENTE,
  CLIENTE_ACTIVO,
  FECHA_CREACION,
  TIENDA_PREFERIDA,
  (SELECT idDireccion FROM DIRECCION WHERE Domicilio=DIRECCION_CLIENTE)
  FROM TEMPORAL
   WHERE not (
	   NOMBRE_CLIENTE='-' and 
	   CORREO_CLIENTE='-' and 
	   CLIENTE_ACTIVO='-' and 
	   FECHA_CREACION='-' and
	   TIENDA_PREFERIDA='_') and not (CORREO_CLIENTE='-')
	   and EXISTS(SELECT idDireccion FROM DIRECCION WHERE Domicilio=DIRECCION_CLIENTE)
   ON CONFLICT (Correo)
DO NOTHING;

-- Para actualizar las rentas por cliente
UPDATE CLIENTE SET Rentas=(SELECT COUNT(*) FROM (SELECT DISTINCT CORREO_CLIENTE, NOMBRE_PELICULA, COUNT(*) 
									   FROM TEMPORAL WHERE NOT CORREO_CLIENTE='-'
GROUP BY CORREO_CLIENTE, NOMBRE_PELICULA) AS FOO WHERE Correo=CORREO_CLIENTE
GROUP BY CORREO_CLIENTE);

------------------------------------------------------------------------- TABLA EMPLEADO
CREATE TABLE IF NOT EXISTS PUBLIC.EMPLEADO(
	Nombre VARCHAR, 
	Apellido VARCHAR,
	Correo VARCHAR PRIMARY KEY,
	Activo VARCHAR,
	TiendaAsignada VARCHAR,
	Usuario VARCHAR,
	Contrasenia VARCHAR,
	idDireccion INTEGER,
	FOREIGN KEY (idDireccion)
	REFERENCES DIRECCION(idDireccion)
);

DROP TABLE EMPLEADO;

INSERT INTO EMPLEADO
  SELECT 
  split_part(NOMBRE_EMPLEADO, ' ', 1),
  split_part(NOMBRE_EMPLEADO, ' ', 2),
  CORREO_EMPLEADO,
  EMPLEADO_ACTIVO,
  TIENDA_EMPLEADO,
  USUARIO_EMPLEADO,
  CONTRASENIA_EMPLEADO,
  (SELECT idDireccion FROM DIRECCION WHERE Domicilio=DIRECCION_CLIENTE)
  FROM TEMPORAL
   WHERE not (
	   NOMBRE_EMPLEADO='-' and 
	   CORREO_EMPLEADO='-' and 
	   EMPLEADO_ACTIVO='-' and 
	   TIENDA_EMPLEADO='-' and
	   USUARIO_EMPLEADO='_' and
	   CONTRASENIA_EMPLEADO='_' and
   	   DIRECCION_EMPLEADO='-' and 
	   CODIGO_POSTAL_EMPLEADO='-' and 
	   CIUDAD_EMPLEADO='-' and 
	   PAIS_EMPLEADO='-') and not (CORREO_EMPLEADO='-')
	   and EXISTS(SELECT idDireccion FROM DIRECCION WHERE Domicilio=DIRECCION_EMPLEADO)
   ON CONFLICT (Correo)
DO NOTHING;

------------------------------------------------------------------------- TABLA TIENDA
CREATE TABLE IF NOT EXISTS PUBLIC.TIENDA(
	Nombre VARCHAR PRIMARY KEY, 
	EncargadoNombre VARCHAR,
	EncargadoApellido VARCHAR,
	idDireccion INTEGER,
	FOREIGN KEY (idDireccion)
	REFERENCES DIRECCION(idDireccion)
);

DROP TABLE TIENDA;

INSERT INTO TIENDA
  SELECT 
  NOMBRE_TIENDA,
  split_part(ENCARGADO_TIENDA, ' ', 1),
  split_part(ENCARGADO_TIENDA, ' ', 2),
  (SELECT idDireccion FROM DIRECCION WHERE Domicilio=DIRECCION_CLIENTE)
  FROM TEMPORAL
   WHERE not (
	   NOMBRE_TIENDA='-' and 
	   ENCARGADO_TIENDA='-' and 
	   EMPLEADO_ACTIVO='-' and 
	   TIENDA_EMPLEADO='-' and
	   USUARIO_EMPLEADO='_' and
	   CONTRASENIA_EMPLEADO='_' and
   	   DIRECCION_EMPLEADO='-') and not NOMBRE_TIENDA='-'
	   and EXISTS(SELECT idDireccion FROM DIRECCION WHERE Domicilio=DIRECCION_TIENDA)
   ON CONFLICT (Nombre)
DO NOTHING;

------------------------------------------------------------------------- TABLA PELICULA
CREATE TABLE IF NOT EXISTS PUBLIC.PELICULA(
	Tienda VARCHAR,
	Nombre VARCHAR PRIMARY KEY,
	Descripcion VARCHAR,
	AnioLanzamiento VARCHAR,
	DiasRenta VARCHAR,
	CostoRenta VARCHAR,
	Duracion VARCHAR,
	CostoDanio VARCHAR,
	Clasificacion VARCHAR,
	Lenguaje VARCHAR,
	Categoria VARCHAR,
	Cantidad INTEGER,
	FOREIGN KEY(Tienda)
	REFERENCES TIENDA(Nombre)
);

DROP TABLE PELICULA;

SELECT * FROM PELICULA;

INSERT INTO PELICULA
SELECT 
TIENDA_PELICULA,
NOMBRE_PELICULA,
DESCRIPCION_PELICULA,
ANIO_LANZAMIENTO,
DIAS_RENTA,
COSTO_RENTA,
DURACION,
COSTO_POR_DANIO,
CLASIFICACION,
LENGUAJE_PELICULA,
CATEGORIA_PELICULA
FROM TEMPORAL
WHERE NOT(TIENDA_PELICULA='-' and NOMBRE_PELICULA='-')
				 and not TIENDA_PELICULA='-'
				 and EXISTS (SELECT Nombre FROM TIENDA WHERE Nombre=TIENDA_PELICULA)
ON CONFLICT(Nombre)
DO NOTHING;

SELECT * FROM PELICULA;

-- Para actualizar la cantidad de cada pelicula
UPDATE PELICULA SET Cantidad=(SELECT DISTINCT COUNT(*) FROM TEMPORAL --WHERE Nombre=NOMBRE_PELICULA
GROUP BY NOMBRE_PELICULA, ACTOR_PELICULA HAVING Nombre=NOMBRE_PELICULA);
				 
------------------------------------------------------------------------- TABLA ACTOR
CREATE TABLE IF NOT EXISTS PUBLIC.ACTOR(
	NombreCompleto VARCHAR,
	Nombre VARCHAR,
	Apellido VARCHAR,
	Pelicula VARCHAR,
	PRIMARY KEY (NombreCompleto, Pelicula),
	FOREIGN KEY (Pelicula) REFERENCES PELICULA(Nombre)
);

DROP TABLE ACTOR;

INSERT INTO ACTOR
SELECT DISTINCT
  ACTOR_PELICULA,
  split_part(ACTOR_PELICULA, ' ', 1),
  split_part(ACTOR_PELICULA, ' ', 2),
  NOMBRE_PELICULA
FROM TEMPORAL
WHERE NOT(ACTOR_PELICULA='-' and NOMBRE_PELICULA='-')
	and EXISTS(SELECT Nombre FROM PELICULA WHERE Nombre=NOMBRE_PELICULA) -- HACER ESTO CON LAS LLAVES FORANEAS
   ON CONFLICT (NombreCompleto, Pelicula)
DO NOTHING;
				 
------------------------------------------------------------------------- TABLA RENTA
CREATE TABLE IF NOT EXISTS PUBLIC.RENTA(
	idRenta SERIAL PRIMARY KEY,
	FechaRenta VARCHAR,
	FechaRetorno VARCHAR,
	MontoPagar VARCHAR,
	FechaPago VARCHAR,
	Cliente VARCHAR,
	Tienda VARCHAR,
	Pelicula VARCHAR,
	FOREIGN KEY (Cliente) REFERENCES CLIENTE(Correo),
	FOREIGN KEY (Tienda) REFERENCES TIENDA(Nombre),
	FOREIGN KEY (Pelicula) REFERENCES PELICULA(Nombre)
);

DROP TABLE RENTA;

INSERT INTO RENTA (FechaRenta, FechaRetorno, MontoPagar, FechaPago, Cliente, Tienda, Pelicula)
SELECT DISTINCT
  FECHA_RENTA,
  FECHA_RETORNO,
  MONTO_A_PAGAR,
  FECHA_PAGO,
  CORREO_CLIENTE,
  NOMBRE_TIENDA,
  NOMBRE_PELICULA
FROM TEMPORAL
WHERE NOT EXISTS (SELECT FROM RENTA WHERE FechaRenta=FECHA_RENTA and
				 FechaRetorno=FECHA_RETORNO and MontoPagar=MONTO_A_PAGAR and
				 FechaPago=FECHA_PAGO) and not FECHA_RENTA='-'
				 and EXISTS (SELECT Correo FROM CLIENTE WHERE Correo=CORREO_CLIENTE)
				 and EXISTS (SELECT Nombre FROM TIENDA WHERE Nombre=NOMBRE_TIENDA)
				 and EXISTS (SELECT Nombre FROM PELICULA WHERE Nombre=NOMBRE_PELICULA);
				
DROP TABLE RENTA;
DROP TABLE ACTOR;
DROP TABLE PELICULA;
DROP TABLE TIENDA;
DROP TABLE EMPLEADO;
DROP TABLE CLIENTE;
DROP TABLE DIRECCION;
--DROP TABLE TEMPORAL;
SELECT * FROM RENTA;
SELECT * FROM ACTOR;
SELECT * FROM PELICULA;
SELECT * FROM TIENDA;
SELECT * FROM EMPLEADO;
SELECT * FROM CLIENTE;
SELECT * FROM DIRECCION;
SELECT * FROM TEMPORAL;

SELECT * FROM TEMPORAL WHERE NOMBRE_PELICULA='GANDHI KWAI';
SELECT * FROM PELICULA WHERE Nombre='GANDHI KWAI'; Daryl Crawford
SELECT * FROM ACTOR WHERE NombreCompleto='Daryl Crawford';  Gina Degeneres
SELECT * FROM ACTOR WHERE NombreCompleto='Meg Hawke'; 

--1) UN COUNT PARA EL NUMERO DE PELICULAS CON CIERTO NOMBRE (DESDE TABLA TEMPORAL)
SELECT DISTINCT NOMBRE_PELICULA, COUNT(*) FROM TEMPORAL WHERE NOT NOMBRE_PELICULA='-'
GROUP BY NOMBRE_PELICULA, ACTOR_PELICULA HAVING LOWER(NOMBRE_PELICULA)=LOWER('SUGAR WONKA');

--2) SALE LA CANTIDAD DE RENTAS POR CLIENTE (DESDE TABLA TEMPORAL)
SELECT CORREO_CLIENTE, COUNT(*) FROM (SELECT DISTINCT CORREO_CLIENTE, NOMBRE_PELICULA, COUNT(*) 
									   FROM TEMPORAL WHERE NOT CORREO_CLIENTE='-'
GROUP BY CORREO_CLIENTE, NOMBRE_PELICULA) AS FOO 
GROUP BY CORREO_CLIENTE HAVING COUNT(*)>40;

--3) 
SELECT * FROM ACTOR WHERE (position('wke' in Apellido)>0);
SELECT NombreCompleto FROM ACTOR WHERE (position('son' in LOWER(Apellido))>0) ORDER BY Nombre ASC;
select * from actor;
select * from direccion;
select * from pelicula where clasificacion='B+15'   
select * from pelicula where nombre='HOUSE DYNAMITE'
select * from actor where nombre='Meg';
select position('om' in 'Thomas')
select position('za' in 'Thomas')