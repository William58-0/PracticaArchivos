-- Database: practica

-- DROP DATABASE practica;

CREATE DATABASE practica
    WITH 
    OWNER = william
    ENCODING = 'UTF8'
    LC_COLLATE = 'es_GT.UTF-8'
    LC_CTYPE = 'es_GT.UTF-8'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1;
	
CREATE TABLE IF NOT EXISTS PUBLIC.TEMPORAL(
    NOMBRE_CLIENTE VARCHAR,
	CORREO_CLIENTE VARCHAR,
	CLIENTE_ACTIVO VARCHAR,
	FECHA_CREACION VARCHAR,
	TIENDA_PREFERIDA VARCHAR,
	--------------------------------- DIRECCION
	DIRECCION_CLIENTE VARCHAR,
	CODIGO_POSTAL_CLIENTE VARCHAR,
	CIUDAD_CLIENTE VARCHAR,
	PAIS_CLIENTE VARCHAR,
	
	FECHA_RENTA VARCHAR,
	FECHA_RETORNO VARCHAR,
	MONTO_A_PAGAR VARCHAR,
	FECHA_PAGO VARCHAR,
	NOMBRE_EMPLEADO VARCHAR,
	CORREO_EMPLEADO VARCHAR,
	EMPLEADO_ACTIVO VARCHAR,
	TIENDA_EMPLEADO VARCHAR,
	USUARIO_EMPLEADO VARCHAR,
	CONTRASENIA_EMPLEADO VARCHAR,
	--------------------------------- DIRECCION
	DIRECCION_EMPLEADO VARCHAR,
	CODIGO_POSTAL_EMPLEADO VARCHAR,
	CIUDAD_EMPLEADO VARCHAR,
	PAIS_EMPLEADO VARCHAR,
	
	NOMBRE_TIENDA VARCHAR,
	ENCARGADO_TIENDA VARCHAR,
	--------------------------------- DIRECCION
	DIRECCION_TIENDA VARCHAR,
	CODIGO_POSTAL_TIENDA VARCHAR,
	CIUDAD_TIENDA VARCHAR,
	PAIS_TIENDA VARCHAR,
	
	TIENDA_PELICULA VARCHAR,
	NOMBRE_PELICULA VARCHAR,
	DESCRIPCION_PELICULA VARCHAR,
	ANIO_LANZAMIENTO VARCHAR,
	DIAS_RENTA VARCHAR,
	COSTO_RENTA VARCHAR,
	DURACION VARCHAR,
	COSTO_POR_DANIO VARCHAR,
	CLASIFICACION VARCHAR,
	LENGUAJE_PELICULA VARCHAR,
	CATEGORIA_PELICULA VARCHAR,
	ACTOR_PELICULA VARCHAR
	--41
	--id SERIAL PRIMARY KEY
	);
	
ALTER TABLE public.TEMPORAL
    OWNER to william;

SELECT * FROM TEMPORAL;

DROP TABLE TEMPORAL;

COPY PUBLIC.TEMPORAL FROM '/tmp/BlockbusterData.csv' DELIMITER ';' CSV HEADER;

------------------------------------------------------------------------- TABLA DIRECCION
CREATE TABLE IF NOT EXISTS PUBLIC.DIRECCION(
	idDireccion SERIAL PRIMARY KEY,
	Domicilio VARCHAR,  -- Para lo que dice direccion
	CodigoPostal VARCHAR,
	Ciudad VARCHAR,
	Pais VARCHAR
);

-- Se insertan las direcciones de clientes
INSERT INTO DIRECCION (Domicilio, CodigoPostal, Ciudad, Pais)
SELECT DISTINCT DIRECCION_CLIENTE, CODIGO_POSTAL_CLIENTE, CIUDAD_CLIENTE, PAIS_CLIENTE from TEMPORAL
WHERE NOT EXISTS(SELECT FROM DIRECCION WHERE 
				 Domicilio=DIRECCION_CLIENTE and
				 CodigoPostal=CODIGO_POSTAL_CLIENTE and
				 Ciudad=CIUDAD_CLIENTE and
				 Pais=PAIS_CLIENTE) and
				 not(DIRECCION_CLIENTE='-' and CODIGO_POSTAL_CLIENTE='-' and CIUDAD_CLIENTE='-' and PAIS_CLIENTE='-') and
				 not(NOMBRE_CLIENTE='-') and
				 not(NOMBRE_TIENDA='-') and
				 not(NOMBRE_EMPLEADO='-');

-- Se insertan las direcciones de Empleados
INSERT INTO DIRECCION (Domicilio, CodigoPostal, Ciudad, Pais)
SELECT DISTINCT DIRECCION_EMPLEADO, CODIGO_POSTAL_EMPLEADO, CIUDAD_EMPLEADO, PAIS_EMPLEADO FROM TEMPORAL
WHERE NOT EXISTS(SELECT FROM DIRECCION WHERE 
				 Domicilio=DIRECCION_EMPLEADO and
				 CodigoPostal=CODIGO_POSTAL_EMPLEADO and
				 Ciudad=CIUDAD_EMPLEADO and
				 Pais=PAIS_EMPLEADO) and
				 not(DIRECCION_EMPLEADO='-' and CODIGO_POSTAL_EMPLEADO='-' and CIUDAD_EMPLEADO='-' and PAIS_EMPLEADO='-') and
				 not(NOMBRE_CLIENTE='-') and
				 not(NOMBRE_TIENDA='-') and
				 not(NOMBRE_EMPLEADO='-');
				 
-- Se insertan las direcciones de Tiendas
INSERT INTO DIRECCION (Domicilio, CodigoPostal, Ciudad, Pais)
SELECT DISTINCT DIRECCION_TIENDA, CODIGO_POSTAL_TIENDA, CIUDAD_TIENDA, PAIS_TIENDA FROM TEMPORAL
WHERE NOT EXISTS(SELECT FROM DIRECCION WHERE 
				 Domicilio=DIRECCION_TIENDA and
				 CodigoPostal=CODIGO_POSTAL_TIENDA and
				 Ciudad=CIUDAD_TIENDA and
				 Pais=PAIS_TIENDA) and
				 not(DIRECCION_TIENDA='-' and CODIGO_POSTAL_TIENDA='-' and CIUDAD_TIENDA='-' and PAIS_TIENDA='-') and
				 not(NOMBRE_CLIENTE='-') and
				 not(NOMBRE_TIENDA='-') and
				 not(NOMBRE_EMPLEADO
					 
SELECT * FROM DIRECCION;
				 
------------------------------------------------------------------------- TABLA CLIENTE
CREATE TABLE IF NOT EXISTS PUBLIC.CLIENTE(
	Nombre VARCHAR, 
	Apellido VARCHAR,
	Correo VARCHAR PRIMARY KEY,
	Activo VARCHAR,
	FechaRegistro VARCHAR,
	TiendaPreferida VARCHAR,
	idDireccion INTEGER,
	Rentas INTEGER,
	FOREIGN KEY (idDireccion)
	REFERENCES DIRECCION(idDireccion)
);

INSERT INTO CLIENTE
  SELECT 
  split_part(NOMBRE_CLIENTE, ' ', 1),
  split_part(NOMBRE_CLIENTE, ' ', 2),
  CORREO_CLIENTE,
  CLIENTE_ACTIVO,
  FECHA_CREACION,
  TIENDA_PREFERIDA,
  (SELECT idDireccion FROM DIRECCION WHERE Domicilio=DIRECCION_CLIENTE)
  FROM TEMPORAL
   WHERE not (
	   NOMBRE_CLIENTE='-' and 
	   CORREO_CLIENTE='-' and 
	   CLIENTE_ACTIVO='-' and 
	   FECHA_CREACION='-' and
	   TIENDA_PREFERIDA='_') and not (CORREO_CLIENTE='-')
	   and EXISTS(SELECT idDireccion FROM DIRECCION WHERE Domicilio=DIRECCION_CLIENTE)
   ON CONFLICT (Correo)
DO NOTHING;

-- Para actualizar las rentas por cliente
UPDATE CLIENTE SET Rentas=(SELECT COUNT(*) FROM (SELECT DISTINCT CORREO_CLIENTE, NOMBRE_PELICULA, COUNT(*) 
									   FROM TEMPORAL WHERE NOT CORREO_CLIENTE='-'
GROUP BY CORREO_CLIENTE, NOMBRE_PELICULA) AS FOO WHERE Correo=CORREO_CLIENTE
GROUP BY CORREO_CLIENTE);

------------------------------------------------------------------------- TABLA EMPLEADO
CREATE TABLE IF NOT EXISTS PUBLIC.EMPLEADO(
	Nombre VARCHAR, 
	Apellido VARCHAR,
	Correo VARCHAR PRIMARY KEY,
	Activo VARCHAR,
	TiendaAsignada VARCHAR,
	Usuario VARCHAR,
	Contrasenia VARCHAR,
	idDireccion INTEGER,
	FOREIGN KEY (idDireccion)
	REFERENCES DIRECCION(idDireccion)
);

INSERT INTO EMPLEADO
  SELECT 
  split_part(NOMBRE_EMPLEADO, ' ', 1),
  split_part(NOMBRE_EMPLEADO, ' ', 2),
  CORREO_EMPLEADO,
  EMPLEADO_ACTIVO,
  TIENDA_EMPLEADO,
  USUARIO_EMPLEADO,
  CONTRASENIA_EMPLEADO,
  (SELECT idDireccion FROM DIRECCION WHERE Domicilio=DIRECCION_CLIENTE)
  FROM TEMPORAL
   WHERE not (
	   NOMBRE_EMPLEADO='-' and 
	   CORREO_EMPLEADO='-' and 
	   EMPLEADO_ACTIVO='-' and 
	   TIENDA_EMPLEADO='-' and
	   USUARIO_EMPLEADO='_' and
	   CONTRASENIA_EMPLEADO='_' and
   	   DIRECCION_EMPLEADO='-' and 
	   CODIGO_POSTAL_EMPLEADO='-' and 
	   CIUDAD_EMPLEADO='-' and 
	   PAIS_EMPLEADO='-') and not (CORREO_EMPLEADO='-')
	   and EXISTS(SELECT idDireccion FROM DIRECCION WHERE Domicilio=DIRECCION_EMPLEADO)
   ON CONFLICT (Correo)
DO NOTHING;

------------------------------------------------------------------------- TABLA TIENDA
CREATE TABLE IF NOT EXISTS PUBLIC.TIENDA(
	Nombre VARCHAR PRIMARY KEY, 
	EncargadoNombre VARCHAR,
	EncargadoApellido VARCHAR,
	idDireccion INTEGER,
	FOREIGN KEY (idDireccion)
	REFERENCES DIRECCION(idDireccion)
);

INSERT INTO TIENDA
  SELECT 
  NOMBRE_TIENDA,
  split_part(ENCARGADO_TIENDA, ' ', 1),
  split_part(ENCARGADO_TIENDA, ' ', 2),
  (SELECT idDireccion FROM DIRECCION WHERE Domicilio=DIRECCION_CLIENTE)
  FROM TEMPORAL
   WHERE not (
	   NOMBRE_TIENDA='-' and 
	   ENCARGADO_TIENDA='-' and 
	   EMPLEADO_ACTIVO='-' and 
	   TIENDA_EMPLEADO='-' and
	   USUARIO_EMPLEADO='_' and
	   CONTRASENIA_EMPLEADO='_' and
   	   DIRECCION_EMPLEADO='-') and not NOMBRE_TIENDA='-'
	   and EXISTS(SELECT idDireccion FROM DIRECCION WHERE Domicilio=DIRECCION_TIENDA)
   ON CONFLICT (Nombre)
DO NOTHING;

------------------------------------------------------------------------- TABLA PELICULA
CREATE TABLE IF NOT EXISTS PUBLIC.PELICULA(
	Tienda VARCHAR,
	Nombre VARCHAR PRIMARY KEY,
	Descripcion VARCHAR,
	AnioLanzamiento VARCHAR,
	DiasRenta VARCHAR,
	CostoRenta VARCHAR,
	Duracion VARCHAR,
	CostoDanio VARCHAR,
	Clasificacion VARCHAR,
	Lenguaje VARCHAR,
	Categoria VARCHAR,
	Cantidad INTEGER,
	FOREIGN KEY(Tienda)
	REFERENCES TIENDA(Nombre)
);

INSERT INTO PELICULA
SELECT 
TIENDA_PELICULA,
NOMBRE_PELICULA,
DESCRIPCION_PELICULA,
ANIO_LANZAMIENTO,
DIAS_RENTA,
COSTO_RENTA,
DURACION,
COSTO_POR_DANIO,
CLASIFICACION,
LENGUAJE_PELICULA,
CATEGORIA_PELICULA
FROM TEMPORAL
WHERE not TIENDA_PELICULA='-'
	  and not NOMBRE_PELICULA='-'
	  and EXISTS (SELECT Nombre FROM TIENDA WHERE Nombre=TIENDA_PELICULA)
ON CONFLICT(Nombre)
DO NOTHING;

-- Para actualizar la cantidad de cada pelicula
UPDATE PELICULA SET Cantidad=(SELECT DISTINCT COUNT(*) FROM TEMPORAL --WHERE Nombre=NOMBRE_PELICULA
GROUP BY NOMBRE_PELICULA, ACTOR_PELICULA HAVING Nombre=NOMBRE_PELICULA);
				 
------------------------------------------------------------------------- TABLA ACTOR
CREATE TABLE IF NOT EXISTS PUBLIC.ACTOR(
	NombreCompleto VARCHAR,
	Nombre VARCHAR,
	Apellido VARCHAR,
	Pelicula VARCHAR,
	PRIMARY KEY (NombreCompleto, Pelicula),
	FOREIGN KEY (Pelicula) REFERENCES PELICULA(Nombre)
);

INSERT INTO ACTOR
SELECT DISTINCT
  ACTOR_PELICULA,
  split_part(ACTOR_PELICULA, ' ', 1),
  split_part(ACTOR_PELICULA, ' ', 2),
  NOMBRE_PELICULA
FROM TEMPORAL
WHERE NOT(ACTOR_PELICULA='-' and NOMBRE_PELICULA='-')
	and EXISTS(SELECT Nombre FROM PELICULA WHERE Nombre=NOMBRE_PELICULA) -- HACER ESTO CON LAS LLAVES FORANEAS
   ON CONFLICT (NombreCompleto, Pelicula)
DO NOTHING;
				 
------------------------------------------------------------------------- TABLA RENTA
CREATE TABLE IF NOT EXISTS PUBLIC.RENTA(
	idRenta SERIAL PRIMARY KEY,
	FechaRenta VARCHAR,
	FechaRetorno VARCHAR,
	MontoPagar DECIMAL,
	FechaPago VARCHAR,
	Cliente VARCHAR,
	Tienda VARCHAR,
	Pelicula VARCHAR,
	FOREIGN KEY (Cliente) REFERENCES CLIENTE(Correo),
	FOREIGN KEY (Tienda) REFERENCES TIENDA(Nombre),
	FOREIGN KEY (Pelicula) REFERENCES PELICULA(Nombre)
);

INSERT INTO RENTA (FechaRenta, FechaRetorno, MontoPagar, FechaPago, Cliente, Tienda, Pelicula)
SELECT DISTINCT
  FECHA_RENTA,
  FECHA_RETORNO,
  MONTO_A_PAGAR::DECIMAL,
  FECHA_PAGO,
  CORREO_CLIENTE,
  NOMBRE_TIENDA,
  NOMBRE_PELICULA
FROM TEMPORAL
WHERE NOT EXISTS (SELECT FROM RENTA WHERE FechaRenta=FECHA_RENTA and
				 FechaRetorno=FECHA_RETORNO and MontoPagar=MONTO_A_PAGAR::DECIMAL and
				 FechaPago=FECHA_PAGO and Cliente=CORREO_CLIENTE and
				 Tienda=NOMBRE_TIENDA and Pelicula=NOMBRE_PELICULA) and not FECHA_RENTA='-'
				 and EXISTS (SELECT Correo FROM CLIENTE WHERE Correo=CORREO_CLIENTE)
				 and EXISTS (SELECT Nombre FROM TIENDA WHERE Nombre=NOMBRE_TIENDA)
				 and EXISTS (SELECT Nombre FROM PELICULA WHERE Nombre=NOMBRE_PELICULA);
				
DROP TABLE RENTA;
DROP TABLE ACTOR;
DROP TABLE PELICULA;
DROP TABLE TIENDA;
DROP TABLE EMPLEADO;
DROP TABLE CLIENTE;
DROP TABLE DIRECCION;
--DROP TABLE TEMPORAL;
SELECT * FROM RENTA;
SELECT * FROM ACTOR;
SELECT * FROM PELICULA;
SELECT * FROM TIENDA;
SELECT * FROM EMPLEADO;
SELECT * FROM CLIENTE;
SELECT * FROM DIRECCION;
SELECT * FROM TEMPORAL;

SELECT * FROM TEMPORAL WHERE NOMBRE_PELICULA='GANDHI KWAI';
SELECT * FROM PELICULA WHERE Nombre='GANDHI KWAI'; Daryl Crawford
SELECT * FROM ACTOR WHERE NombreCompleto='Daryl Crawford';  Gina Degeneres
SELECT * FROM ACTOR WHERE NombreCompleto='Meg Hawke'; 

-- 1)
-- RESULTADO = 17	 
SELECT Nombre, Cantidad FROM PELICULA WHERE Nombre='SUGAR WONKA';
					 
-- 2)
-- RESULTADO = 6 CLIENTES
SELECT DISTINCT CLIENTE.Nombre, CLIENTE.Apellido, 
					 (SELECT SUM(CAST(RENTA1.MontoPagar AS DECIMAL)) FROM RENTA RENTA1 INNER JOIN CLIENTE CLIENTE1 
					  ON RENTA1.Cliente = CLIENTE1.Correo WHERE CLIENTE1.Correo=CLIENTE.Correo)as Monto 
FROM CLIENTE INNER JOIN RENTA ON CLIENTE.Correo = RENTA.Cliente 
WHERE CLIENTE.Rentas >39;					 
					
-- 3) 
SELECT NombreCompleto FROM ACTOR WHERE (position('son' in LOWER(Apellido))>0) ORDER BY Nombre ASC;

-- 4)
SELECT PELICULA.Nombre, PELICULA.Descripcion, ACTOR.NombreCompleto, Pelicula.AnioLanzamiento
FROM PELICULA INNER JOIN ACTOR ON PELICULA.Nombre = ACTOR.Pelicula 
WHERE( (position('crocodile' in LOWER(PELICULA.Descripcion))>0) and 
	   (position('shark' in LOWER(PELICULA.Descripcion))>0) and
	 	not ACTOR.NombreCompleto='-') 
ORDER BY ACTOR.Apellido ASC;

-- 5)
SELECT DIRECCION.Pais, CLIENTE.Nombre, CLIENTE.Apellido,
					 CONCAT(ROUND(((CLIENTE.Rentas)::DECIMAL*100
								   /
								   (SELECT SUM(Rentas) FROM CLIENTE)::DECIMAL)::DECIMAL, 2),' %') as porcentaje 
FROM DIRECCION INNER JOIN CLIENTE ON DIRECCION.idDireccion = CLIENTE.idDireccion 
WHERE CLIENTE.Rentas = (SELECT MAX (Rentas) FROM CLIENTE);
	 
-- 6)
SELECT DISTINCT (SELECT COUNT(*) FROM CLIENTE) AS TOTAL_CLIENTES, D.Pais, D.Ciudad, CONCAT(ROUND((
	SELECT COUNT(*)
	FROM DIRECCION INNER JOIN CLIENTE ON DIRECCION.idDireccion = CLIENTE.idDireccion
	WHERE DIRECCION.Pais=D.Pais AND DIRECCION.Ciudad=D.Ciudad
	GROUP BY DIRECCION.Pais, DIRECCION.Ciudad)::DECIMAL*100
					 /
	(SELECT COUNT(*)
	FROM DIRECCION INNER JOIN CLIENTE ON DIRECCION.idDireccion = CLIENTE.idDireccion
	WHERE DIRECCION.Pais=D.Pais
	GROUP BY DIRECCION.Pais)::DECIMAL, 2), ' %') as Porcentaje
FROM DIRECCION D ORDER BY D.Pais ASC;

-- Comprobacion de que los porcentajes suman 100.
SELECT (SELECT COUNT(*) FROM CLIENTE) AS TOTAL_CLIENTES, D.Pais, D.Ciudad, ((SELECT COUNT(*)
FROM DIRECCION INNER JOIN CLIENTE ON DIRECCION.idDireccion = CLIENTE.idDireccion
WHERE DIRECCION.Pais=D.Pais AND DIRECCION.Ciudad=D.Ciudad
GROUP BY DIRECCION.Pais, DIRECCION.Ciudad)*100/(
	SELECT COUNT(*)
	FROM DIRECCION INNER JOIN CLIENTE ON DIRECCION.idDireccion = CLIENTE.idDireccion
	WHERE DIRECCION.Pais=D.Pais
	GROUP BY DIRECCION.Pais)) as Porcentaje
FROM DIRECCION D WHERE D.Pais='United States';

-- 7)  
SELECT Pais, Ciudad FROM DIRECCION ORDER BY Pais ASC;

--numero de ciudades por pais
SELECT DCP.Pais, COUNT(*) FROM DIRECCION DCP
GROUP BY DCP.Pais ORDER BY DCP.Pais ASC;

--rentas por ciudad y pais correcto
SELECT DIRECCION.Pais, DIRECCION.Ciudad, RENTA.FechaRenta
FROM RENTA 
INNER JOIN CLIENTE ON RENTA.Cliente = CLIENTE.Correo
INNER JOIN DIRECCION ON CLIENTE.idDireccion = DIRECCION.idDireccion
WHERE DIRECCION.Pais='Afghanistan' and DIRECCION.Ciudad='Kabul';

-- promedio = (rentas totales pais y ciudad)/(no.ciudades por pais) DEFINITIVE
SELECT DISTINCT DP.Pais, DP.Ciudad, (SELECT COUNT(*)
									FROM RENTA
									INNER JOIN CLIENTE ON RENTA.Cliente = CLIENTE.Correo
									INNER JOIN DIRECCION ON CLIENTE.idDireccion = DIRECCION.idDireccion
									WHERE DIRECCION.Pais=DP.Pais and DIRECCION.Ciudad=DP.Ciudad), (
	(SELECT COUNT(*)
				FROM RENTA
				INNER JOIN CLIENTE ON RENTA.Cliente = CLIENTE.Correo
				INNER JOIN DIRECCION ON CLIENTE.idDireccion = DIRECCION.idDireccion
				WHERE DIRECCION.Pais=DP.Pais and DIRECCION.Ciudad=DP.Ciudad)
							/
	(SELECT COUNT(*) FROM DIRECCION DCP WHERE DCP.Pais=DP.Pais GROUP BY DCP.Pais)
						   ) as Promedio
FROM DIRECCION DP ORDER BY DP.Pais ASC, DP.Ciudad ASC;

--8)
SELECT DISTINCT CORREO_CLIENTE, NOMBRE_PELICULA, FECHA_RENTA FROM TEMPORAL WHERE PAIS_CLIENTE='United States' and CIUDAD_CLIENTE='Aurora'
SELECT DISTINCT Cliente, Pelicula, FechaRenta FROM RENTA

--Rentas totales pais
SELECT RENTA.Cliente, RENTA.Pelicula, RENTA.FechaRenta, DIRECCION.Pais
FROM RENTA 
INNER JOIN CLIENTE ON RENTA.Cliente = CLIENTE.Correo
INNER JOIN PELICULA ON RENTA.Pelicula = PELICULA.Nombre
INNER JOIN DIRECCION ON CLIENTE.idDireccion = DIRECCION.idDireccion;
WHERE DIRECCION.Pais='United States';

--Rentas del pais en categoria sports
SELECT RENTA.Cliente, RENTA.Pelicula, RENTA.FechaRenta
FROM RENTA 
INNER JOIN CLIENTE ON RENTA.Cliente = CLIENTE.Correo
INNER JOIN PELICULA ON RENTA.Pelicula = PELICULA.Nombre
INNER JOIN DIRECCION ON CLIENTE.idDireccion = DIRECCION.idDireccion
WHERE DIRECCION.Pais='United States' and LOWER(PELICULA.Categoria)=LOWER('Sports');

--completo
--porcentaje de rentas=(rentas de sport por pais) / (rentas por pais)
SELECT DP.Pais, coalesce((
	(SELECT COUNT(*)
	FROM RENTA RENTA1 
	INNER JOIN CLIENTE CLIENTE1 ON RENTA1.Cliente = CLIENTE1.Correo
	INNER JOIN PELICULA PELICULA1 ON RENTA1.Pelicula = PELICULA1.Nombre
	INNER JOIN DIRECCION DIRECCION1 ON CLIENTE1.idDireccion = DIRECCION1.idDireccion
	WHERE DIRECCION1.Pais=DP.Pais)
		/
	NULLIF((SELECT COUNT(*)
		FROM RENTA RENTA2
		INNER JOIN CLIENTE CLIENTE2  ON RENTA2.Cliente = CLIENTE2.Correo
		INNER JOIN PELICULA PELICULA2 ON RENTA2.Pelicula = PELICULA2.Nombre
		INNER JOIN DIRECCION DIRECCION2 ON CLIENTE2.idDireccion = DIRECCION2.idDireccion
		WHERE DIRECCION2.Pais=DP.Pais and PELICULA2.Categoria='Sports'),0)
		),0) AS PROMEDIO_SPORTS
FROM DIRECCION DP ORDER BY DP.Pais ASC;
					 
--9)
-- NO. DE RENTAS POR CIUDAD DE ESTADOS UNIDOS
SELECT RENTA.Cliente, RENTA.Pelicula, RENTA.FechaRenta -- se reemplaza con count(*)
FROM RENTA 
INNER JOIN CLIENTE ON RENTA.Cliente = CLIENTE.Correo
INNER JOIN PELICULA ON RENTA.Pelicula = PELICULA.Nombre
INNER JOIN DIRECCION ON CLIENTE.idDireccion = DIRECCION.idDireccion
WHERE DIRECCION.Pais='United States' and DIRECCION.Ciudad='Aurora';	
		 
-- NO. DE RENTAS DE DAYTON
SELECT RENTA.Cliente, RENTA.Pelicula, RENTA.FechaRenta -- se reemplaza con count(*)
FROM RENTA 
INNER JOIN CLIENTE ON RENTA.Cliente = CLIENTE.Correo
INNER JOIN PELICULA ON RENTA.Pelicula = PELICULA.Nombre
INNER JOIN DIRECCION ON CLIENTE.idDireccion = DIRECCION.idDireccion
WHERE DIRECCION.Ciudad='Dayton';	
				
					 
SELECT DP.Ciudad, (SELECT COUNT(*)
						FROM RENTA 
						INNER JOIN CLIENTE ON RENTA.Cliente = CLIENTE.Correo
						INNER JOIN PELICULA ON RENTA.Pelicula = PELICULA.Nombre
						INNER JOIN DIRECCION ON CLIENTE.idDireccion = DIRECCION.idDireccion
						WHERE (DIRECCION.Pais='United States' or DIRECCION.Pais='Estados Unidos') and
						 DIRECCION.Ciudad=DP.Ciudad)		 
FROM DIRECCION DP WHERE (DP.Pais='United States' or DP.Pais='Estados Unidos') and
					 --rentas > rentas dayton
						(SELECT COUNT(*)
						FROM RENTA RENTA1 
						INNER JOIN CLIENTE CLIENTE1 ON RENTA1.Cliente = CLIENTE1.Correo
						INNER JOIN PELICULA PELICULA1 ON RENTA1.Pelicula = PELICULA1.Nombre
						INNER JOIN DIRECCION DIRECCION1 ON CLIENTE1.idDireccion = DIRECCION1.idDireccion
						WHERE (DIRECCION1.Pais='United States' or DIRECCION1.Pais='Estados Unidos') and
						 DIRECCION1.Ciudad=DP.Ciudad)
						 >
						(SELECT COUNT(*)
						FROM RENTA RENTA2
						INNER JOIN CLIENTE CLIENTE2 ON RENTA2.Cliente = CLIENTE2.Correo
						INNER JOIN PELICULA PELICULA2 ON RENTA2.Pelicula = PELICULA2.Nombre
						INNER JOIN DIRECCION DIRECCION2 ON CLIENTE2.idDireccion = DIRECCION2.idDireccion
						WHERE DIRECCION2.Ciudad='Dayton')
					 ORDER BY DP.Ciudad ASC;
					 
--10)
--CUIDADES POR PAIS EN RENTAS
CREATE TEMP TABLE IF NOT EXISTS CONT_CAT AS 				 
	SELECT DISTINCT DIRECCION.Ciudad, DIRECCION.Pais, PELICULA.Categoria, COUNT(*) AS CONT-- se reemplaza con count(*)
	FROM RENTA 
	INNER JOIN CLIENTE ON RENTA.Cliente = CLIENTE.Correo
	INNER JOIN PELICULA ON RENTA.Pelicula = PELICULA.Nombre
	INNER JOIN DIRECCION ON CLIENTE.idDireccion = DIRECCION.idDireccion 
	GROUP BY DIRECCION.Ciudad, DIRECCION.Pais, PELICULA.Categoria
	ORDER BY Direccion.Pais ASC;
					 
SELECT * FROM CONT_CAT WHERE 		 
(SELECT MAX (CONT) FROM CONT_CAT CC

SELECT CF.Ciudad, CF.Pais, CF.Categoria, 
					 (SELECT MAX (CONT) FROM CONT_CAT CC WHERE CC.Ciudad=CF.Ciudad and CC.Pais=CF.Pais) FROM CONT_CAT CF
 WHERE CF.CONT=(SELECT MAX (CONT) FROM CONT_CAT CC WHERE CC.Ciudad=CF.Ciudad and CC.Pais=CF.Pais)
 and CF.Categoria='Horror';